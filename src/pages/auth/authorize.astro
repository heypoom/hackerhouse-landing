---
import { IdTokenInspector } from '$components/idTokenInspector'
import { isSensitiveScope, oauthClients } from '$constants/oauth'
import { errorPage } from '$functions/errorPage'
import Blank from '$layouts/blank.astro'

import type { OAuthClientConfig } from '$constants/oauth'

// if not, redirect to login page
if (!Astro.locals.user) {
  return Astro.redirect(
    `/auth/login?${new URLSearchParams({
      dest: Astro.url.pathname + Astro.url.search,
    })}`
  )
}

let trustedClient: OAuthClientConfig | undefined
let untrustedReason = 'The provided client_id is not recognized'

// parse raw request
const clientId = Astro.url.searchParams.get('client_id') ?? ''
const state = Astro.url.searchParams.get('state') ?? ''
const scopes = (Astro.url.searchParams.get('scope') ?? '')
  .split(' ')
  .filter(Boolean)
const redirectUri = Astro.url.searchParams.get('redirect_uri') ?? ''

// check if client is trusted (trust client will redirect to client without asking user)
const client = oauthClients.find(c => c.clientId === clientId)

if (client) {
  if (client.redirectUris.includes(redirectUri)) {
    const unallowedSensitiveScopes: string[] = []
    for (const scopeName of scopes) {
      if (
        isSensitiveScope(scopeName) &&
        !(client.allowedScopes ?? ([] as string[])).includes(scopeName)
      ) {
        unallowedSensitiveScopes.push(scopeName)
      }
    }
    if (unallowedSensitiveScopes.length === 0) {
      trustedClient = client
    } else {
      const list = unallowedSensitiveScopes.map(s => `"${s}"`).join(', ')
      untrustedReason = `The application requested access to sensitive scopes (${list}) that it is not allowed to access`
    }
  } else {
    untrustedReason = 'The provided redirect_uri is not recognized'
  }
}

const nonce = Astro.url.searchParams.get('nonce') ?? undefined
const { data: idTokenInfo } = await Astro.locals.eden.auth.mintIdToken.post({
  audience: clientId,
  scopes,
  nonce,
})

if (!idTokenInfo)
  return new Response(null, {
    status: 400,
  })

// build final redirect uri
const redirectTo = new URL(redirectUri)
const responseType = Astro.url.searchParams.get('response_type') ?? 'id_token'
const responseMode = Astro.url.searchParams.get('response_mode') ?? 'query'
const updateResponse = (f: (searchParams: URLSearchParams) => void) => {
  // The non-standard `response_mode` value `hash` is for compatibility.
  // Please use `fragment` going forward!
  if (responseMode === 'fragment' || responseMode === 'hash') {
    const searchParams = new URLSearchParams()
    f(searchParams)
    redirectTo.hash = '#' + searchParams.toString()
  } else {
    f(redirectTo.searchParams)
  }
}
updateResponse(searchParams => {
  searchParams.set('state', state)
  if (responseType === 'code') {
    searchParams.set(
      'code',
      JSON.stringify({
        access_token: idTokenInfo.idToken,
        token_type: 'Bearer',
        expires_in: 3600,
        scope: scopes.join(' '),
        id_token: idTokenInfo.idToken,
      })
    )
  } else {
    searchParams.set('id_token', idTokenInfo.idToken)
  }
})

if (redirectTo.protocol !== 'https:' && redirectTo.protocol !== 'http:') {
  return errorPage(
    400,
    'Bad Request',
    'Invalid redirect_uri - only http and https are supported'
  )
}

// check if user has authorized this client before
const { data: hasAuthorized } = await Astro.locals.eden.auth.oauth.check.get({
  clientId,
  redirectUri,
  scopes,
})

// if trusted client or authorized to oauth before, then redirect
if (
  trustedClient !== undefined ||
  hasAuthorized ||
  Astro.request.method === 'POST'
) {
  if (!hasAuthorized)
    await Astro.locals.eden.auth.oauth.record.post({
      clientId,
      redirectUri,
      scopes,
    })
  return Astro.redirect(redirectTo.toString())
}
---

<Blank>
  <Fragment slot="head">
    <title>Authgarten</title>
  </Fragment>
  <main class="mx-auto max-w-7xl px-4 py-12">
    <h1 class="mb-4 text-4xl font-medium">Data access request</h1>
    <p class="mb-3">
      A third-party application at <strong>{redirectTo.origin}</strong>{' '}
      would like to access information in your Creatorsgarten account.
    </p>
    <p class="mb-3">The following information will be shared:</p>
    <div class="mb-3">
      <IdTokenInspector claims={idTokenInfo.claims} />
    </div>
    <p class="mb-3">
      If you trust this application, click the button below to send the
      information:
    </p>
    <form method="post" data-astro-reload>
      <button
        type="submit"
        class="inline-flex w-full shrink-0 justify-center rounded-lg bg-[#1c1916] px-4 py-2 text-white sm:w-auto sm:rounded-full"
      >
        Send information and continue
      </button>
    </form>
    <div class="hidden">Untrusted reason: {untrustedReason}</div>
  </main>
</Blank>
